#+STARTUP: overview


* Personal Keybindings

** Rebinded basic commands

(("M-x"     . counsel-M-x)     
("C-x C-f" . counsel-find-file)
("C-x C-r" . counsel-recentf)  
("C-c l"   . counsel-locate))  
("M-y" . 'helm-show-kill-ring)
("C-x b" . 'helm-mini)
("C-x C-b" . 'helm-buffers-list))
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
("C-c d" . 'helm-descbinds))

** Movement and search

("M-s" . avy-goto-char))
("C-x C-e" . mc/edit-lines)
("C->" . mc/mark-next-like-this)
("C-<" . 'mc/mark-previous-like-this)
(global-set-key (kbd "M-o") 'ace-window))

(global-set-key "\C-ca" 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

* Config elements

#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC

#+RESULTS:
: t

** Shell in other buffer

#+BEGIN_SRC emacs-lisp
(defun shell-other-window ()
  "Open a `shell' in a new window."
  (interactive)
  (let ((buf (shell)))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf)))
#+END_SRC

** Counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel 
  :ensure t
  :bind*                           ; load counsel when pressed
  (("M-x"     . counsel-M-x)       ; M-x use counsel
   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
   ("C-x C-r" . counsel-recentf)   ; search recently edited files
   ("C-c l"   . counsel-locate))   ; search for files or else using locate
  )
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind*
  ("M-y" . 'helm-show-kill-ring)
  ("C-x b" . 'helm-mini)
  ("C-x C-b" . 'helm-buffers-list))
(use-package helm-descbinds
  :ensure t
  :bind*
  ("C-c d" . 'helm-descbinds))
#+END_SRC

#+RESULTS:
: helm-descbinds


** Org

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC


#+RESULTS:
: counsel-locate

** Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
        ))
#+END_SRC

#+RESULTS:
: t
** Org-mode

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package org-ac
  :ensure t
  :init (progn
	  (require 'org-ac)
	  (org-ac/config-default)
	  ))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
	 ((agenda "")
	  (alltodo "")))))

(setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"))

(setq org-capture-templates
      '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
	 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
	("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/todos.org" "To Do")
	 "* TODO %?\n%u" :prepend t)
	))


#+END_SRC


** Org-babel

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC ipython :session :exports both :results raw drawer\n?\n#+END_SRC"))
#+END_SRC
#+RESULTS:
| /usr/bin | /bin | /usr/sbin | /sbin | /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9 | /Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_9 | /Applications/Emacs.app/Contents/MacOS/libexec | /Applications/Emacs.app/Contents/MacOS/bin | /opt/local/bin |



** Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

#+RESULTS:
: avy-goto-char

** Multiple cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind*
    ("C-x C-e" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . 'mc/mark-previous-like-this)
    :config
    (setq mc/always-run-for-all t)
)
#+END_SRC



#+RESULTS:
: mc/mark-previous-like-this

** Ace window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (global-set-key (kbd "M-o") 'ace-window))
  #+END_SRC

#+RESULTS:
: t

* Install Packages 

(setq package-list '(magit with-editor async magit-popup dash async let-alist git-commit with-editor async dash ghub let-alist dash async ghub let-alist git-commit with-editor async dash let-alist magit-popup dash async dash with-editor async counsel swiper ivy helm-descbinds helm helm-core async popup async hydra leuven-theme org-ac yaxception log4e auto-complete-pcmp yaxception log4e auto-complete popup org-bullets org-jira s request popup request s swiper ivy try use-package bind-key yaxception))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
